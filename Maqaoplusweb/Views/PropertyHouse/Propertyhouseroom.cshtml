@model DBL.Models.PropertyHouseDetailData
@{
    ViewData["Title"] = "Propertyhouseroom";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<div class="row">
    <div class="col-sm-12">
        <div class="card card-outline card-info">
            <div class="card-header py-1">
                <div class="row">
                    <div class="col-sm-10">
                        <h6 class="font-weight-bold text-sm card-title">Property House Rooms</h6>
                    </div>
                    <div class="col-sm-2">
                        <a asp-action="Addpropertyhouseroom" asp-controller="PropertyHouse" asp-route-code="@Guid.NewGuid()" asp-route-Houseroomid="0" asp-area="" id="CAN_ADD_PROPERTY_HOUSE_ROOM" style="display:none;" class="btn-info btn-xs btn-outline-info text-white font-weight-bold text-uppercase main float-right" data-target="#Uttambsolutionsmodallarge" data-toggle="modal" data-backdrop="static" data-keyboard="false">Add House Room</a>
                    </div>
                </div>
            </div>
            <div class="card-body table-responsive table-responsive-sm">
                <table class="table table-bordered table-striped compact table-sm table-responsive-sm nowrap text-nowrap" id="AllsystemDataTables">
                    <thead>
                        <tr>
                            <th>House</th>
                            <th>Size</th>
                            <th>Room</th>
                            <th>Rent</th>
                            <th>Ishop</th>
                            <th>Isvacant</th>
                            <th>Renovated</th>
                            <th>Ground Floor</th>
                            <th>Balcony</th>
                            <th class="text-right">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Data !=null)
                        {
                            foreach (var item in Model.Data)
                            {
                                <tr>
                                    <td>@item.Propertyhousename</td>
                                    <td>@item.Systemhousesizename</td>
                                    <td>@item.Systempropertyhousesizename</td>
                                    <td>
                                        <p class="mb-0">
                                            <span class="badge badge-primary custom-badge"><strong>Rent:</strong> Kes. @item.Systempropertyhousesizerent.ToString("#,##0")</span>
                                            @if (item.Systempropertyhousesizedeposit)
                                            {
                                                <span class="badge badge-warning custom-badge"><strong>Deposit:</strong> Kes. @item.Systempropertyhousesizerent.ToString("#,##0")</span>
                                            }
                                        </p>
                                    </td>
                                    <td>
                                        <p class="mb-0"><span class="badge badge-success custom-badge"><strong>Is Shop:</strong> @item.Propertyhouseshop</span></p>
                                    </td>
                                    <td>
                                        <p class="mb-0"><span class="badge badge-danger custom-badge"><strong>Is Vacant:</strong> @item.Propertyhousevacant</span></p>
                                    </td>
                                    <td>
                                        <p class="mb-0"><span class="badge badge-warning custom-badge"><strong>Under Renovation:</strong> @item.Propertyhouseunderrenovation</span></p>
                                    </td>
                                    <td>
                                        <p class="mb-0"><span class="badge badge-success custom-badge"><strong>Is Ground Floor:</strong> @item.Propertyhousegroundfloor</span></p>
                                    </td>
                                    <td><p class="mb-0"><span class="badge badge-success custom-badge"><strong>Has Balcony:</strong> @item.Propertyhousebalcony</span></p></td>
                                    <td class="text-right">
                                        <a asp-action="Addpropertyhouseroom" asp-controller="PropertyHouse" asp-route-code="@Guid.NewGuid()" asp-route-Houseroomid="@item.Systempropertyhouseroomid" asp-area="" id="CAN_EDIT_PROPERTY" style="display:none;" class="btn-info btn-xs btn-outline-info text-white font-weight-bold text-uppercase main" data-target="#Uttambsolutionsmodallarge" data-toggle="modal" data-backdrop="static" data-keyboard="false">Manage</a>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        function searchsystemstaffdata() {
            var idNumber = $('#Systemstaffidnumberid').val();
            if (idNumber.trim() === "") {
                $("#Systemstaffidnumberid").addClass('is-invalid');
                return;
            } else {
                $("#Systemstaffidnumberid").removeClass('is-invalid').addClass('is-valid');
            }

            $.ajax({
                url: '/Account/Getsystemstaffdatabyidnumber',
                type: 'GET',
                data: { Idnumber: idNumber },
                success: function (response) {
                    var resultsContainer = $('#searchResults');
                    resultsContainer.empty();
                    if (response) {
                        alert(JSON.stringify(response));
                        var cardHtml =
                            '<input type="text" id="systemstaffid" value="' + response.Data.Userid + '" class="form-control mb-2" hidden />' +
                            '<h5 class="card-title">Name: ' + response.Data.Fullname + '</h5>' +
                            '<p class="card-text">ID Number: ' + response.Data.Idnumber + '</p>' +
                            '<p class="card-text">Email Address: ' + response.Data.Emailaddress + '</p>' +
                            '<p class="card-text">Phone Number: ' + response.Data.Phonenumber + '</p>';

                        resultsContainer.append(cardHtml);
                    } else {
                        resultsContainer.append('<tr><td colspan="4" class="text-center">No results found.</td></tr>');
                    }

                    resultsContainer.removeClass('d-none');
                    $("#searchresultbuttons").removeClass('d-none');
                },
                error: function () {
                    alert('An error occurred while searching. Please try again.');
                }
            });
        }

        function savesystempropertyhouseroomtenantdata() {
            document.getElementById("savesystempropertyhouseroomtenantdataid").disabled = true;
            document.getElementById("processingSpinner").style.display = "inline-block";
            document.getElementById("buttonText").innerText = "Processing...";
            var uil = {
                Houseroomid: $('#Houseroomid').val(), Tenantid: $('#systemstaffid').val(),
                Createdby: $('#systemLoggedinedUserid').val(),
                Datecreated: new Date(new Date().toString().split('GMT')[0] + ' UTC').toISOString().split('.')[0].replace('T', ' ')
            };
            $.post("/PropertyHouse/Addsystempropertyhouseroomtenantdata", uil, function (response) {
                if (response.RespStatus == 0) {
                    Swal.fire('Saved!', response.RespMessage, 'success')
                    $('#Uttambsolutionsmodal').hide();
                    setTimeout(function () { location.reload(); }, 1000);
                } else if (response.RespStatus == 1) {
                    Swal.fire("Tenant Not saved", response.RespMessage, "warning");
                }
                else {
                    Swal.fire("Oops! Something Went Wrong", "Database Error has occured. Kindly Contact our support team.", "error");
                }
                document.getElementById("savesystempropertyhouseroomtenantdataid").disabled = false;
                document.getElementById("processingSpinner").style.display = "none";
                document.getElementById("buttonText").innerText = "Save changes";
            }).fail(function () {
                Swal.fire("Oops! Something Went Wrong", "A critical error has occurred. Kindly Contact our support team.", "error");
                document.getElementById("savesystempropertyhouseroomtenantdataid").disabled = false;
                document.getElementById("processingSpinner").style.display = "none";
                document.getElementById("buttonText").innerText = "Save changes";
            });
        }

        document.addEventListener('input', function (event) {
            var target = event.target;
            if (target.closest('#roommeterreadingtable')) {
                var detailRows = document.querySelectorAll('#roommeterreadingtable tbody tr');
                detailRows.forEach(function (row) {
                    var roomopeningmeter = parseFloat(row.querySelector('.system-property-house-room-opening-meter').value) || 0;
                    var roomclosingmeter = parseFloat(row.querySelector('.system-property-house-room-closing-meter').value) || 0;
                    var movedmeterunits = parseFloat(row.querySelector('.system-property-house-room-moved-meter').value) || 0;
                    var rowIsValid = true;

                    // Validate roomclosingmeter to ensure it's greater than or equal to roomopeningmeter
                    if (roomclosingmeter < roomopeningmeter) {
                        row.querySelector('.system-property-house-room-closing-meter').classList.add('is-invalid');
                        rowIsValid = false;
                    } else {
                        row.querySelector('.system-property-house-room-closing-meter').classList.remove('is-invalid');
                    }

                    // Calculate moved meter units
                    movedmeterunits = roomclosingmeter - roomopeningmeter;
                    movedmeterunits = Math.max(movedmeterunits, 0);
                    row.querySelector('.system-property-house-room-moved-meter').value = movedmeterunits.toFixed(2);

                    // Calculate meter consumed amount
                    var meterconsumedamount = movedmeterunits * 200;
                    meterconsumedamount = Math.max(meterconsumedamount, 0); // Ensure amount is non-negative
                    row.querySelector('.system-property-house-room-meter-cost').value = meterconsumedamount.toFixed(2);
                });
            }
        });



        function savesystempropertyroomdata() {
            document.getElementById("savesystempropertyroomid").disabled = true;
            document.getElementById("processingSpinner").style.display = "inline-block";
            document.getElementById("buttonText").innerText = "Processing...";

            var uil = {
                Systempropertyhouseroomid: $('#Systempropertyhouseroomid').val(), Kitchentypeid: $('#Kitchentypeid').val(), Systempropertyhousesizeid: $('#Systempropertyhousesizeid').val(),Systempropertyhousesizerent: $('#Systempropertyhousesizerentid').val(),
                Systempropertyhousesizename: $('#Systempropertyhousesizenameid').val(), Forcaretaker: $('#Forcaretakerid').prop('checked'), Isshop: $('#Isshopid').prop('checked'), Isgroundfloor: $('#Isgroundfloorid').prop('checked'),
                Hasbalcony: $('#Hasbalconyid').prop('checked'), Isunderrenovation: $('#Isunderrenovationid').prop('checked'),Systempropertyhousemeterid: $('.system-property-house-meterid').val(),
                Systempropertyhouseroommeternumber: $('.system-property-house-room-meter-number').val(),Openingmeter: parseFloat($('.system-property-house-room-opening-meter').val()),Closingmeter: parseFloat($('.system-property-house-room-closing-meter').val()),
                Movedmeter: parseFloat($('.system-property-house-room-moved-meter').val()), Consumedamount: parseFloat($('.system-property-house-room-meter-cost').val()),Tenantid: $('#systemstaffid').val(),
                Createdby: $('#systemLoggedinedUserid').val(),Datecreated: new Date(new Date().toString().split('GMT')[0] + ' UTC').toISOString().split('.')[0].replace('T', ' ')
            };

            // Validate form data
            var errors = [];

            // Ensure required fields are not empty
            if (!uil.Systempropertyhouseroomid) errors.push("Room ID is required.");
            if (!uil.Systempropertyhousesizeid) errors.push("House size ID is required.");
            if($('#Systempropertyhousesizerentid').val()==='' ||$('#Systempropertyhousesizerentid').val()===0 )errors.push("Room rent is required.");

            if($('#Systempropertyhousehashousewatermeterid').prop('checked')){
                 if (!uil.Systempropertyhouseroommeternumber) errors.push("Meter number is required.");
                // Validate numeric fields
                if (isNaN(uil.Openingmeter) || uil.Openingmeter < 0) errors.push("Opening meter must be a non-negative number.");
                if (isNaN(uil.Closingmeter) || uil.Closingmeter < 0) errors.push("Closing meter must be a non-negative number.");
                if (isNaN(uil.Movedmeter) || uil.Movedmeter < 0) errors.push("Moved meter must be a non-negative number.");
                if (isNaN(uil.Consumedamount) || uil.Consumedamount < 0) errors.push("Consumed amount must be a non-negative number.");
            }

            // If there are validation errors, show them and exit
            if (errors.length > 0) {
                Swal.fire("Validation Error", errors.join('<br>'), "error");
                document.getElementById("savesystempropertyroomid").disabled = false;
                document.getElementById("processingSpinner").style.display = "none";
                document.getElementById("buttonText").innerText = "SAVE";
                return;
            }

            $.post("/PropertyHouse/Addpropertyhouseroomdata", uil, function (response) {
                if (response.RespStatus == 0) {
                    Swal.fire('Saved!', response.RespMessage, 'success')
                    $('#Uttambsolutionsmodal').hide();
                    setTimeout(function () { location.reload(); }, 1000);
                } else if (response.RespStatus == 1) {
                    Swal.fire("House Room Not saved", response.RespMessage, "warning");
                }
                else {
                    Swal.fire("Oops! Something Went Wrong", "Database Error has occured. Kindly Contact our support team.", "error");
                }
                document.getElementById("savesystempropertyroomid").disabled = false;
                document.getElementById("processingSpinner").style.display = "none";
                document.getElementById("buttonText").innerText = "SAVE";
            });
        }



        function savesystempropertyroommeterdata() {
            document.getElementById("savesystempropertyroommeterid").disabled = true;
            document.getElementById("processingSpinner").style.display = "inline-block";
            document.getElementById("buttonText").innerText = "Processing...";
            var meterData = {
                Systempropertyhousemeterid: $('.system-property-house-meterid').val(),
                Systempropertyhouseroomid: $('.system-property-house-roomid').val(),
                Systempropertyhouseroommeternumber: $('.system-property-house-room-meter-number').val(),
                Openingmeter: parseFloat($('.system-property-house-room-opening-meter').val()),
                Closingmeter: parseFloat($('.system-property-house-room-closing-meter').val()),
                Movedmeter: parseFloat($('.system-property-house-room-moved-meter').val()),
                Consumedamount: parseFloat($('.system-property-house-room-meter-cost').val()),
                Createdby: $('#systemLoggedinedUserid').val(),
                Datecreated: new Date(new Date().toString().split('GMT')[0] + ' UTC').toISOString().split('.')[0].replace('T', ' ')
            };

            // Client-side validation
            if (isNaN(meterData.Openingmeter) || isNaN(meterData.Closingmeter) || meterData.Openingmeter > meterData.Closingmeter) {
                alert("Please ensure all meter readings are valid and the closing meter is greater than or equal to the opening meter.");
                return;
            }
            $.post("/PropertyHouse/Addpropertyhouseroommeterdata", meterData, function (response) {
                if (response.RespStatus == 0) {
                    Swal.fire('Saved!', response.RespMessage, 'success')
                    $('#Uttambsolutionsmodal').hide();
                    setTimeout(function () { location.reload(); }, 1000);
                } else if (response.RespStatus == 1) {
                    Swal.fire("House Room Meter Not saved", response.RespMessage, "warning");
                }
                else {
                    Swal.fire("Oops! Something Went Wrong", "Database Error has occured. Kindly Contact our support team.", "error");
                }
                document.getElementById("savesystempropertyroommeterid").disabled = false;
                document.getElementById("processingSpinner").style.display = "none";
                document.getElementById("buttonText").innerText = "SAVE";
            });
        }

        function savesystempropertyhouseroompaymentdata() {
            document.getElementById("savesystempropertyhouseroompaymentid").disabled = true;
            document.getElementById("processingSpinner").style.display = "inline-block";
            document.getElementById("buttonText").innerText = "Processing...";
            var meterData = {
                TenantId: $('#TenantId').val(),
                TenanthouserroomId: $('#TenanthouserroomId').val(),
                TransactionReference: $('#Systempmpesatransactionreferenceid').val(),
                Datecreated: new Date(new Date().toString().split('GMT')[0] + ' UTC').toISOString().split('.')[0].replace('T', ' ')
            };
            $.post("/PropertyHouse/Confirmhouseroompaymentdata", meterData, function (response) {
                if (response.RespStatus == 0) {
                    Swal.fire('Saved!', response.RespMessage, 'success')
                    $('#Uttambsolutionsmodal').hide();
                    setTimeout(function () { location.reload(); }, 1000);
                } else if (response.RespStatus == 1) {
                    Swal.fire("Payment Not Verified", response.RespMessage, "warning");
                }
                else {
                    Swal.fire("Oops! Something Went Wrong", "Database Error has occured. Kindly Contact our support team.", "error");
                }
                document.getElementById("savesystempropertyhouseroompaymentid").disabled = false;
                document.getElementById("processingSpinner").style.display = "none";
                document.getElementById("buttonText").innerText = "CONFIRM PAYMENT";
            });
        }

    </script>
}