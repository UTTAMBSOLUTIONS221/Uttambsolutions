@model IEnumerable<DBL.Entities.Tokenization.Tokenpurchase>
@{
    ViewData["Title"] = "Shareslist";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<div class="row">
    <div class="col-sm-12">
        <div class="card card-outline card-info">
            <div class="card-header">
                <div class="row">
                    <div class="col-sm-10">
                        <h6 class="font-weight-bold text-sm card-title">Shares</h6>
                    </div>
                    <div class="col-sm-2">
                        <a asp-action="Buyshare" asp-controller="Staff" asp-route-code="@Guid.NewGuid()" asp-route-Userid="0" asp-area="" id="CAN_ADD_STAFF" style="display:none;" class="btn-info btn-xs btn-outline-info text-white font-weight-bold text-uppercase main float-right" data-target="#Uttambsolutionsmodal" data-toggle="modal" data-backdrop="static" data-keyboard="false">Buy Shares</a>
                    </div>
                </div>
            </div>
            <div class="card-body table-responsive">
                <table class="table table-bordered table-striped compact table-sm table-responsive-sm text-nowrap nowrap" id="AllsystemDataTables">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Amount</th>
                            <th>Cost</th>
                            <th>Status</th>
                            <th class="text-right">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null)
                        {
                            foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.Tokenname</td>
                                    <td>@item.Tokenprice.ToString("#,##0.00")</td>
                                    <td>@item.Tokenamount.ToString("#,##0.00")</td>
                                    <td>@item.Totalcost.ToString("#,##0.00")</td>
                                    <td>
                                        @if (item.Tokenstatus==3)
                                        {
                                            <span class="badge badge-warning badge-info-xs text-uppercase font-weight-bold text-white">Not Paid</span>
                                        }else if (item.Tokenstatus==3)
                                        {
                                            <span class="badge badge-secondary badge-info-xs text-uppercase font-weight-bold text-white">Partially Paid</span>
                                        }
                                        else
                                        {
                                            <span class="badge badge-success badge-info-xs text-uppercase font-weight-bold text-white">Paid</span>
                                        }
                                    </td>
                                    <td class="nowrap text-nowrap no-wrap-buttons">
                                         @if (item.Tokenstatus ==3 || item.Tokenstatus ==2)
                                        {
                                            <a onclick="verifythistokenpurchase(event)" data-Entryid="@item.Tokenpurchaseid" id="CAN_EDIT_STAFF" class="btn-info btn-xs btn-outline-info text-white font-weight-bold text-uppercase main float-right" data-toggle="modal" data-backdrop="static" data-keyboard="false">Validate</a>
                                        }
                                        else
                                        {
                                            <a href="#" class="btn-info btn-xs btn-outline-info text-white font-weight-bold text-uppercase main">Paid</a>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script type="text/javascript">
            let isValid = true;
            ﻿function savesoftwaretokenpurchasedata() {
                isValid = true;
                document.getElementById("savesoftwaretokenpurchaseid").disabled = true;
                document.getElementById("processingSpinner").style.display = "inline-block";
                document.getElementById("buttonText").innerText = "Processing...";
                if ($('#Tokenid').val() === "" || $('#Tokenid').val() === "0") {
                    $('#Tokenid').addClass('is-invalid');  // Add the 'is-invalid' class using jQuery
                    isValid = false;
                } else {
                    $('#Tokenid').removeClass('is-invalid');  // Remove the 'is-invalid' class using jQuery
                }
                if ($('#Tokenamountid').val() === "" || $('#Tokenamountid').val() === "0") {
                    $('#Tokenamountid').addClass('is-invalid');  // Add the 'is-invalid' class using jQuery
                    isValid = false;
                } else {
                    $('#Tokenamountid').removeClass('is-invalid');  // Remove the 'is-invalid' class using jQuery
                }

                // If the form is not valid, exit the function
                if (!isValid) {
                    document.getElementById("savesoftwaretokenpurchaseid").disabled = false;
                    document.getElementById("processingSpinner").style.display = "none";
                    document.getElementById("buttonText").innerText = "SAVE";
                    return;
                }

                var uil1 = {
                    Tokenpurchaseid: $('#Tokenpurchaseid').val(), Tokenid: $('#Tokenid').val(),Tokenamount: $('#Tokenamountid').val(),Userid: $('#systemLoggedinedUserid').val(),Purchasedate: new Date(new Date().toString().split('GMT')[0] + ' UTC').toISOString().split('.')[0].replace('T', ' ')
                };
                $.post("/Staff/Registersoftwaretokenpurchase", uil1, function (response) {
                    if (response.RespStatus == 0) {
                        Swal.fire('Saved!', response.RespMessage, 'success')
                        setTimeout(function () { location.reload(); }, 1000);
                    } else if (response.RespStatus == 1) {
                        Swal.fire("Token details not saved", response.RespMessage, "warning");
                    }
                    else {
                        Swal.fire("Oops! Something Went Wrong", "Database Error has occured. Kindly Contact our support team.", "error");
                    }
                    document.getElementById("savesoftwaretokenpurchaseid").disabled = false;
                    document.getElementById("processingSpinner").style.display = "none";
                    document.getElementById("buttonText").innerText = "SAVE";
                });
            }

            function verifythistokenpurchase(event) {
            Swal.fire({
                title: "Are you sure you want to validate this?",
                text: "Once validated, will be okay!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, validate it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Log event and target for debugging purposes
                    console.log("Event triggered, target element:", event.target);
                    var activateBtn = event.target;

                    // Get the Entryid from the button
                    var Entryid = activateBtn.getAttribute('data-Entryid');
                    if (!Entryid) {
                        Swal.fire("Error", "Entry ID not found. Please try again.", "error");
                        return;
                    }

                    // Log Entryid for debugging
                    console.log("Entryid found:", Entryid);

                    // Send the POST request to verify the staff account
                    $.post("/Staff/Verifythistokenpurchasedatabyid/" + Entryid, function (response) {
                        console.log("Response from server:", response); // Log response for debugging
                        if (response.RespStatus === 0) {
                            Swal.fire('Item Validated!', 'Good.', 'success');
                            setTimeout(function () { location.reload(); }, 1000);
                        } else if (response.RespStatus === 1) {
                            Swal.fire("Oops!", response.RespMessage, "warning");
                        } else {
                            Swal.fire("Oops! Something Went Wrong", "Database error has occurred. Kindly contact our support team.", "error");
                        }
                    }).fail(function (xhr, status, error) {
                        // Log the error for debugging
                        console.log("AJAX error:", error);
                        Swal.fire("Error", "An error occurred while verifying the staff account. Please try again.", "error");
                    });
                } else {
                    Swal.fire("Thank you!", "Validate once you are sure.", "info");
                }
            });
        }
    </script>
}
