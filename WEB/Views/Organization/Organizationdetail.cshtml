@model DBL.Models.SystemOrganizationDetails;
@{
    ViewData["Title"] = "Organizationdetail";
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
}
<div class="row">
    <div class="col-sm-6">
        <div class="card card-outline card-info">
            <div class="card-header py-1">
                <div class="row">
                    <div class="col-sm-12">
                        <h6 class="font-weight-bold text-sm card-title">Inventory Products</h6>
                    </div>
                </div>
            </div>
            <div class="card-body table-responsive table-responsive-sm">
                <table class="table table-bordered table-striped compact table-sm table-responsive-sm nowrap text-nowrap" id="AllsystemDataTables">
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Name</th>
                            <th>Brand</th>
                            <th>Category</th>
                            <th>Wholesale Price</th>
                            <th class="text-right">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Systemproducts != null)
                        {
                            foreach (var item in Model.Systemproducts)
                            {
                                <tr>
                                    <td><img src="@Url.Content(item.Primaryimageurl)" height="40" width="40" /></td>
                                    <td>@item.Productname</td>
                                    <td>@item.Brandname</td>
                                    <td>@item.Categoryname</td>
                                    <td>@item.Wholesaleprice.ToString("F2")</td>
                                    <td class="text-right"><a asp-action="Addproducttoshop" asp-controller="Organization" asp-route-code="@Guid.NewGuid()" asp-route-OrganizationId="@Model.OrganizationId" asp-route-Productid="@item.Productid" asp-route-Wholesaleprice="@item.Wholesaleprice" asp-route-Retailprice="@item.Retailprice" asp-route-Productname="@item.Productname" asp-area="" class="btn-info btn-xs btn-outline-info text-white font-weight-bold text-uppercase main float-right" data-target="#Uttambsolutionsmodal" data-toggle="modal" data-backdrop="static" data-keyboard="false">Sell on my shop</a></td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
      <div class="col-sm-6">
        <div class="card card-outline card-info">
            <div class="card-header py-1">
                <div class="row">
                    <div class="col-sm-12">
                        <h6 class="font-weight-bold text-sm card-title">My Shop Products</h6>
                    </div>
                </div>
            </div>
            <div class="card-body table-responsive table-responsive-sm">
                <table class="table table-bordered table-striped compact table-sm table-responsive-sm nowrap text-nowrap" id="AllsystemDataTables1">
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Name</th>
                            <th>Color</th>
                            <th>Size</th>
                            <th>Model</th>
                            <th>Stock</th>
                            <th>Price</th>
                            <th class="text-right">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Organizationshopproducts != null)
                        {
                            foreach (var item in Model.Organizationshopproducts)
                            {
                                <tr>
                                    <td><img src="@Url.Content(item.Primaryimageurl)" height="40" width="40" /></td>
                                    <td>@item.Productname</td>
                                    <td>@item.ProductColor</td>
                                    <td>@item.ProductSize</td>
                                    <td>@item.ProductModel</td>
                                    <td>@item.ProductStock</td>
                                    <td>@item.Marketprice.ToString("F2")</td>
                                    <td class="text-right"><a asp-action="Editshopproduct" asp-controller="Organization" asp-route-code="@Guid.NewGuid()" asp-route-Shopproductid="@item.Shopproductid" asp-area="" class="btn-info btn-xs btn-outline-info text-white font-weight-bold text-uppercase main float-right" data-target="#Uttambsolutionsmodal" data-toggle="modal" data-backdrop="static" data-keyboard="false">Edit</a></td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://www.gstatic.com/firebasejs/7.20.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/7.20.0/firebase-storage.js"></script>
    <script type="text/javascript">
const firebaseConfig = {
            apiKey: "AIzaSyCmRT7WLWSDUAqUmUCNRVlTcZ1ZOPsmgwc",
            authDomain: "uttambsolutions-4ec2a.firebaseapp.com",
            projectId: "uttambsolutions-4ec2a",
            storageBucket: "uttambsolutions-4ec2a.appspot.com",
            messagingSenderId: "336739823411",
            appId: "1:336739823411:web:f2ad2d4dba0f7881f5d846",
            measurementId: "G-Z24LLL0113"
        };
        firebase.initializeApp(firebaseConfig);
        var storage = firebase.storage();

        function shopproductFileChanged(event) {
            var files = event.target.files;
            uploadImage(files);
            console.log(document.getElementById('UttambsolutionsimagesurlId').files);
        }

        async function uploadImage(files) {
            // Array to store the download URLs
            var downloadURLs = [];

            // Function to generate a unique file name
            function generateFileName(file) {
                // Generate a unique identifier
                var uniqueId = Date.now();
                // Get the file extension
                var fileExtension = file.name.split('.').pop();
                // Construct the new file name
                var newFileName = 'Shopproduct/Shopproductimage/' + uniqueId + '.' + fileExtension;
                return newFileName;
            }

            // Function to upload a single file
            async function uploadFile(file) {
                return new Promise((resolve, reject) => {
                    var newFileName = generateFileName(file); // Generate a new file name

                    var storageRef = storage.ref().child(newFileName);
                    var uploadTask = storageRef.put(file);

                    uploadTask.on('state_changed',
                        function (snapshot) {
                            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                            console.log('Upload is ' + progress + '% done');
                        },
                        function (error) {
                            reject('Error uploading file: ' + error);
                        },
                        function () {
                            // Upload complete
                            uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {
                                console.log('File available at', downloadURL);
                                downloadURLs.push(downloadURL);
                                resolve(downloadURL);
                            });
                        }
                    );
                });
            }

            // Function to display image preview
            function displayImagePreview(file) {
                return new Promise((resolve, reject) => {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        // Create a container element
                        var previewContainer = document.createElement('div');
                        previewContainer.classList.add('image-preview');

                        // Create a spinner element
                        var spinner = document.createElement('div');
                        spinner.classList.add('spinner');

                        // Append the spinner to the container
                        previewContainer.appendChild(spinner);

                        // Append the container to the preview container element
                        var previewContainerElement = document.getElementById('Uttambsolutionsimagespreviewcontainer');
                        previewContainerElement.appendChild(previewContainer);

                        // Create a new image element
                        var img = document.createElement('img');
                        img.src = e.target.result;
                        img.width = 140;
                        img.height = 140;
                        img.style.display = 'none'; // Hide the image initially
                        img.onload = function () {
                            // Show the image and remove the spinner
                            spinner.remove();
                            img.style.display = 'block';
                            previewContainer.appendChild(img);
                        };

                        resolve();
                    };
                    reader.readAsDataURL(file);
                });
            }

            // Show the overlay with the spinner
             document.getElementById('loadingOverlay').style.zIndex = 1100; 
            document.getElementById('loadingOverlay').style.display = 'flex';

            // Iterate over each file
            for (var i = 0; i < files.length; i++) {
                var file = files[i];

                try {
                    // Display the image preview first with a loading indicator
                    await displayImagePreview(file);

                    // Upload the file and get the download URL
                    var downloadURL = await uploadFile(file);
                } catch (error) {
                    console.error(error);
                }
            }

            // Hide the overlay after all uploads are complete
            document.getElementById('loadingOverlay').style.display = 'none';

            // Set the input field value with JSON stringified URLs
            var inputField = document.getElementById('UttambsolutionsimagesurlId');
            inputField.value = JSON.stringify(downloadURLs);
        }

    ﻿function saveorgshopproductdata() {
    document.getElementById("saveorgshopproductid").disabled = true;
    document.getElementById("processingSpinner").style.display = "inline-block";
    document.getElementById("buttonText").innerText = "Processing...";
    if ($('#Productnameid').val() === '') {
        Swal.fire("Shop product Not Created", 'Product Name is Required', "warning");
        document.getElementById("saveorgshopproductid").disabled = false;
        document.getElementById("processingSpinner").style.display = "none";
        document.getElementById("buttonText").innerText = "SAVE";
        return;
    }
    if ($('#Marketpriceid').val() === ''|| $('#Marketpriceid').val() === 0) {
        Swal.fire("Shop product Not Created", 'Selling Price is Required', "warning");
        document.getElementById("saveorgshopproductid").disabled = false;
        document.getElementById("processingSpinner").style.display = "none";
        document.getElementById("buttonText").innerText = "SAVE";
        return;
    }
     if ($('#ProductSizeid').val() === '') {
        Swal.fire("Shop product Not Created", 'Size is Required', "warning");
        document.getElementById("saveorgshopproductid").disabled = false;
        document.getElementById("processingSpinner").style.display = "none";
        document.getElementById("buttonText").innerText = "SAVE";
        return;
    }
    if ($('#ProductColorid').val() === '') {
        Swal.fire("Shop product Not Created", 'Color is Required', "warning");
        document.getElementById("saveorgshopproductid").disabled = false;
        document.getElementById("processingSpinner").style.display = "none";
        document.getElementById("buttonText").innerText = "SAVE";
        return;
    }
    if ($('#ProductModelid').val() === '') {
        Swal.fire("Shop product Not Created", 'Model is Required', "warning");
        document.getElementById("saveorgshopproductid").disabled = false;
        document.getElementById("processingSpinner").style.display = "none";
        document.getElementById("buttonText").innerText = "SAVE";
        return;
    }
    if ($('#ProductStockid').val() === '' || $('#ProductStockid').val() === 0) {
        Swal.fire("Shop product Not Created", 'Units Available is Required', "warning");
        document.getElementById("saveorgshopproductid").disabled = false;
        document.getElementById("processingSpinner").style.display = "none";
        document.getElementById("buttonText").innerText = "SAVE";
        return;
    }
    if ($('#Productdescriptionid').val() === '') {
        Swal.fire("Shop product Not Created", 'Descriptive Narration is Required', "warning");
        document.getElementById("saveorgshopproductid").disabled = false;
        document.getElementById("processingSpinner").style.display = "none";
        document.getElementById("buttonText").innerText = "SAVE";
        return;
    }
    var Shopproductfeaturesdata = [];
    var Shopproductwhatsinboxsdata = [];
    var ShopProductImagesdata = [];

    $("#ShopProductFeatureTable tbody tr").each(function () {
        var row = $(this);
        var Shopproductfeaturedata = {
            ProductFeature: row.find('td:eq(0)').text(),
            DateCreated: new Date(new Date().toString().split('GMT')[0] + ' UTC').toISOString().split('.')[0].replace('T', ' ')
        };
        Shopproductfeaturesdata.push(Shopproductfeaturedata);
    });
    $("#ShopProductFeatureTable tbody tr").each(function () {
        var row = $(this);
        var Shopproductwhatsinboxdata = {
            ProductWhatsInBoxItem: row.find('td:eq(0)').text(),
            DateCreated: new Date(new Date().toString().split('GMT')[0] + ' UTC').toISOString().split('.')[0].replace('T', ' ')
        };
        Shopproductwhatsinboxsdata.push(Shopproductwhatsinboxdata);
    });
     ShopProductImagesdata = {
            ProductWhatsInBoxItem:$('#UttambsolutionsimagesurlId').val().replaceAll('\\"', '"').split(','),
            DateCreated: new Date(new Date().toString().split('GMT')[0] + ' UTC').toISOString().split('.')[0].replace('T', ' ')
        };
    
    var uil1 = {
        Shopproductid:$('#Shopproductid').val(),Productid:$('#Productid').val(),Productname:$('#Productnameid').val(),Organizationid:$('#Organizationid').val(),Marketprice:$('#Marketpriceid').val(),Productdescription:$('#Productdescriptionid').val(),ProductSize:$('#ProductSizeid').val(),ProductColor:$('#ProductColorid').val(),ProductModel:$('#ProductModelid').val(),ProductStock:$('#ProductStockid').val(),
        DateCreated:new Date(new Date().toString().split('GMT')[0] + ' UTC').toISOString().split('.')[0].replace('T', ' '),Shopproductfeature:Shopproductfeaturesdata,Shopproductwhatsinbox:Shopproductwhatsinboxsdata,ShopProductImage:ShopProductImagesdata
    };
         alert(JSON.stringify(uil1));

    $.post("/Organization/Addorganizationshopproductsdata", uil1, function (response) {
        if (response.RespStatus == 0) {
            Swal.fire('Saved!', response.RespMessage, 'success')
            $('#Uttambsolutionsmodal').hide();
            setTimeout(function () { location.reload(); }, 1000);
        } else if (response.RespStatus == 1) {
            Swal.fire("Organization details not saved", response.RespMessage, "warning");
        }
        else {
            Swal.fire("Oops! Something Went Wrong", "Database Error has occured. Kindly Contact our support team.", "error");
        }
        document.getElementById("saveorgshopproductid").disabled = false;
        document.getElementById("processingSpinner").style.display = "none";
        document.getElementById("buttonText").innerText = "SAVE";
        });
    }


     var tableBody = $('#ShopProductFeatureTable tbody');
        var noDataRows = tableBody.find('tr');
        if (noDataRows.length === 1 && noDataRows.hasClass('odd')) {
            // Remove the "No data available in table" row
            tableBody.empty();
        }
        function addshopproductfeaturedata() {
            if ($('#SystemshopproductfeaturenameId').val() == "") {
                Swal.fire("Product Feature Not Created", 'Product feature is Required', "warning");
                return;
            }
            var Productfeaturename = $('#SystemshopproductfeaturenameId').val();
           

            // Check if the table body contains any rows
            var tableBody = $('#ShopProductFeatureTable tbody');
            var noDataRows = tableBody.find('tr');
            if (noDataRows.length === 1 && noDataRows.hasClass('odd')) {
                // Remove the "No data available in table" row
                tableBody.empty();
            }
            // Append row to table
            var newRow = '<tr>' +
                '<td>' + Productfeaturename + '</td>' +
                '<td class="text-right">' +
                '<button class="btn-info btn-xs btn-outline-info text-white font-weight-bold text-uppercase main m-1" onclick="editshopproductfeaturedata(this.parentNode.parentNode)">Edit</button>' +
                '<button class="btn-info btn-xs btn-outline-info text-white font-weight-bold text-uppercase main m-1" onclick="updateshopproductfeaturedata(this.parentNode.parentNode)">Update</button>' +
                '</td>' +
                '</tr>';

            $('#ShopProductFeatureTable tbody').append(newRow);
            // Clear the form after adding a new row
            clearShopProductFeatureForm();
        }

        // Function to populate input fields with values from the selected row for editing
        function editshopproductfeaturedata(row) {
            var cells = $(row).children();
            $('#SystemshopproductfeaturenameId').val($(cells[0]).text());
        }
        // Function to update the selected row with edited values
        function updateshopproductfeaturedata(row) {
            if ($('#SystemshopproductfeaturenameId').val() == "") {
                Swal.fire("Product Feature Not Created", 'Product feature is Required', "warning");
                return;
            }
            var cells = $(row).children(); // Get the cells of the selected row

            // Update the cells with edited values from input fields
            $(cells[0]).text($('#SystemshopproductfeaturenameId').val());
            clearShopProductFeatureForm();
        }
        // Function to clear the form after adding a new row or updating
        function clearShopProductFeatureForm() {
            $('#SystemshopproductfeaturenameId').val('');
        }

        var tableBody = $('#ShopProductBoxItemTable tbody');
        var noDataRows = tableBody.find('tr');
        if (noDataRows.length === 1 && noDataRows.hasClass('odd')) {
            // Remove the "No data available in table" row
            tableBody.empty();
        }
        function addshopproductboxitemdata() {
            if ($('#SystemshopproductboxitemnameId').val() == "") {
                Swal.fire("Product Box Item Not Created", 'Product Box Item is Required', "warning");
                return;
            }
            var Productboxitemname = $('#SystemshopproductboxitemnameId').val();
           

            // Check if the table body contains any rows
            var tableBody = $('#ShopProductBoxItemTable tbody');
            var noDataRows = tableBody.find('tr');
            if (noDataRows.length === 1 && noDataRows.hasClass('odd')) {
                // Remove the "No data available in table" row
                tableBody.empty();
            }
            // Append row to table
            var newRow = '<tr>' +
                '<td>' + Productboxitemname + '</td>' +
                '<td class="text-right">' +
                '<button class="btn-info btn-xs btn-outline-info text-white font-weight-bold text-uppercase main m-1" onclick="editshopproductboxitemdata(this.parentNode.parentNode)">Edit</button>' +
                '<button class="btn-info btn-xs btn-outline-info text-white font-weight-bold text-uppercase main m-1" onclick="updateshopproductboxitemdata(this.parentNode.parentNode)">Update</button>' +
                '</td>' +
                '</tr>';

            $('#ShopProductBoxItemTable tbody').append(newRow);
            // Clear the form after adding a new row
            clearShopProductBoxItemForm();
        }

        // Function to populate input fields with values from the selected row for editing
        function editshopproductboxitemdata(row) {
            var cells = $(row).children();
            $('#SystemshopproductboxitemnameId').val($(cells[0]).text());
        }
        // Function to update the selected row with edited values
        function updateshopproductboxitemdata(row) {
           if ($('#SystemshopproductboxitemnameId').val() == "") {
                Swal.fire("Product Box Item Not Created", 'Product Box Item is Required', "warning");
                return;
            }
            var cells = $(row).children(); // Get the cells of the selected row

            // Update the cells with edited values from input fields
            $(cells[0]).text($('#SystemshopproductboxitemnameId').val());
            clearShopProductBoxItemForm();
        }
        // Function to clear the form after adding a new row or updating
        function clearShopProductBoxItemForm() {
            $('#SystemshopproductboxitemnameId').val('');
        }
   </script>
}
