@model IEnumerable<DBL.Entities.Productbrand>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
}
<div class="row">
    <div class="col-sm-12">
        <div class="card card-outline card-info">
            <div class="card-header py-1">
                <div class="row">
                    <div class="col-sm-8">
                        <h6 class="font-weight-bold text-sm card-title">Brands</h6>
                    </div>
                    <div class="col-sm-4">
                        <a asp-action="Addproductbrand" asp-controller="Brand" asp-route-code="@Guid.NewGuid()" asp-route-Brandid="0" asp-area=""  id="CAN_ADD_BRAND" style="display:none;"  class="btn-info btn-xs btn-outline-info text-white font-weight-bold text-uppercase main float-right" data-target="#Uttambsolutionsmodal" data-toggle="modal" data-backdrop="static" data-keyboard="false">Add Brand</a>
                    </div>
                </div>
            </div>
            <div class="card-body table-responsive table-responsive-sm">
                <table class="table table-bordered table-striped compact table-sm table-responsive-sm nowrap text-nowrap" id="AllsystemDataTables">
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Name</th>
                            <th class="text-right">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td><img src="@Url.Content(item.Brandpathurl)" height="40" width="40"/></td>
                                <td>@item.Brandname</td>
                                <td class="text-right"><a asp-action="Addproductbrand" asp-controller="Brand" asp-route-code="@Guid.NewGuid()" asp-route-Brandid="@item.Brandid" asp-area=""  id="CAN_EDIT_BRAND" style="display:none;"  class="btn-info btn-xs btn-outline-info text-white font-weight-bold text-uppercase main float-right" data-target="#Uttambsolutionsmodal" data-toggle="modal" data-backdrop="static" data-keyboard="false">Edit</a></td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@section Scripts {
      <script src="https://www.gstatic.com/firebasejs/7.20.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/7.20.0/firebase-storage.js"></script>
    <script type="text/javascript">
       const firebaseProdConfig = {
            apiKey: "AIzaSyCmRT7WLWSDUAqUmUCNRVlTcZ1ZOPsmgwc",
            authDomain: "uttambsolutions-4ec2a.firebaseapp.com",
            projectId: "uttambsolutions-4ec2a",
            storageBucket: "uttambsolutions-4ec2a.appspot.com",
            messagingSenderId: "336739823411",
            appId: "1:336739823411:web:f2ad2d4dba0f7881f5d846",
            measurementId: "G-Z24LLL0113"
        };
        
        const firebaseDevConfig = {
            apiKey: "AIzaSyC7PeGxi7RWy6wVOnrGFU9y6Rmz6ejFLiI",
            authDomain: "uttambsolutionsdev.firebaseapp.com",
            projectId: "uttambsolutionsdev",
            storageBucket: "uttambsolutionsdev.appspot.com",
            messagingSenderId: "629286721346",
            appId: "1:629286721346:web:25a76122562d4630639adb",
            measurementId: "G-W3W3KJ6SGH"
        };

        // Check the environment passed from the server
        const environment = "@ViewBag.Environment";
        const firebaseConfig = environment === 'Production' ? firebaseProdConfig : firebaseDevConfig;

        firebase.initializeApp(firebaseConfig);
        var storage = firebase.storage();

        function brandFileChanged(event) {
            var files = event.target.files;
            uploadImage(files);
            console.log(document.getElementById('UttambsolutionsimagesurlId').files);
        }

        async function uploadImage(files) {
            // Array to store the download URLs
            var downloadURLs = [];

            // Function to generate a unique file name
            function generateFileName(file) {
                // Generate a unique identifier
                var uniqueId = Date.now();
                // Get the file extension
                var fileExtension = file.name.split('.').pop();
                // Construct the new file name
                var newFileName = 'Product/Brandimage/' + uniqueId + '.' + fileExtension;
                return newFileName;
            }

            // Function to upload a single file
            async function uploadFile(file) {
                return new Promise((resolve, reject) => {
                    var newFileName = generateFileName(file); // Generate a new file name

                    var storageRef = storage.ref().child(newFileName);
                    var uploadTask = storageRef.put(file);

                    uploadTask.on('state_changed',
                        function (snapshot) {
                            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                            console.log('Upload is ' + progress + '% done');
                        },
                        function (error) {
                            reject('Error uploading file: ' + error);
                        },
                        function () {
                            // Upload complete
                            uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {
                                console.log('File available at', downloadURL);
                                downloadURLs.push(downloadURL);
                                resolve(downloadURL);
                            });
                        }
                    );
                });
            }

            // Function to display image preview
            function displayImagePreview(file) {
                return new Promise((resolve, reject) => {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        // Create a container element
                        var previewContainer = document.createElement('div');
                        previewContainer.classList.add('image-preview');

                        // Create a spinner element
                        var spinner = document.createElement('div');
                        spinner.classList.add('spinner');

                        // Append the spinner to the container
                        previewContainer.appendChild(spinner);

                        // Append the container to the preview container element
                        var previewContainerElement = document.getElementById('Uttambsolutionsimagespreviewcontainer');
                        previewContainerElement.appendChild(previewContainer);

                        // Create a new image element
                        var img = document.createElement('img');
                        img.src = e.target.result;
                        img.width = 140;
                        img.height = 140;
                        img.style.display = 'none'; // Hide the image initially
                        img.onload = function () {
                            // Show the image and remove the spinner
                            spinner.remove();
                            img.style.display = 'block';
                            previewContainer.appendChild(img);
                        };

                        resolve();
                    };
                    reader.readAsDataURL(file);
                });
            }

            // Show the overlay with the spinner
             document.getElementById('loadingOverlay').style.zIndex = 1100; 
            document.getElementById('loadingOverlay').style.display = 'flex';

            // Iterate over each file
            for (var i = 0; i < files.length; i++) {
                var file = files[i];

                try {
                    // Display the image preview first with a loading indicator
                    await displayImagePreview(file);

                    // Upload the file and get the download URL
                    var downloadURL = await uploadFile(file);
                } catch (error) {
                    console.error(error);
                }
            }

            // Hide the overlay after all uploads are complete
            document.getElementById('loadingOverlay').style.display = 'none';

            // Set the input field value with JSON stringified URLs
            var inputField = document.getElementById('UttambsolutionsimagesurlId');
            inputField.value = JSON.stringify(downloadURLs);
        }
    
        
        ﻿function savesystemproductbranddata() {
            document.getElementById("savesystemproductbrandid").disabled = true;
            document.getElementById("processingSpinner").style.display = "inline-block";
            document.getElementById("buttonText").innerText = "Processing...";
            if ($('#Brandnameid').val() === '') {
                Swal.fire("Brand Not Created", 'Brand Name is Required', "warning");
                document.getElementById("savesystemproductbrandid").disabled = false;
                document.getElementById("processingSpinner").style.display = "none";
                document.getElementById("buttonText").innerText = "SAVE";
                return;
            }
    
            var uil1 = {
                Brandid: $('#Brandid').val(), Brandname: $('#Brandnameid').val(),Brandpathurl: $('#UttambsolutionsimagesurlId').val().replace(/^\[|\]$/g, '').replace(/^"|"$/g, '')
            };
 
            $.post("/Brand/Addsystemproductbranddata", uil1, function (response) {
                if (response.RespStatus == 0) {
                    Swal.fire('Saved!', response.RespMessage, 'success')
                    $('#Uttambsolutionsmodal').hide();
                    setTimeout(function () { location.reload(); }, 1000);
                } else if (response.RespStatus == 1) {
                    Swal.fire("Brand details not saved", response.RespMessage, "warning");
                }
                else {
                    Swal.fire("Oops! Something Went Wrong", "Database Error has occured. Kindly Contact our support team.", "error");
                }
                document.getElementById("savesystemproductbrandid").disabled = false;
                document.getElementById("processingSpinner").style.display = "none";
                document.getElementById("buttonText").innerText = "SAVE";
                });
            }
   </script>
}
